version: '3.9'

services:
  db:
    image: postgres:16
    platform: linux/arm64
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: inventory
    volumes: ['pgdata:/var/lib/postgresql/data']
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    platform: linux/arm64
    volumes: ['redisdata:/data']

  api:
    build:
      context: .
      dockerfile: ./infra/docker/Dockerfile.api # multi-stage release build
      args:
        PHOENIX_DIR: modules/api
        WEB_DIR: modules/web
    platform: linux/arm64
    env_file: .env.production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.routers.api.tls.certresolver=le
    expose: ['4000']
    command: ['/app/bin/entrypoint.sh']

  traefik:
    image: traefik:v3.0
    command:
      - --providers.docker=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.le.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
    ports: ['80:80', '443:443']
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt

volumes:
  pgdata:
  redisdata:
  traefik_letsencrypt:
